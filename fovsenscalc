#!/usr/bin/env python

#===============================================================================
# OpenArena FOV sensitivity calculator - fovsenscalc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# WTF is this?
#   script used to calculate mouse sensitivity values after changing `cg_fov`
#   that will keep the exact same "feel" of the mouse
#
# Who made this?
#   My little commie <3
#===============================================================================

"""
OpenArena FOV sensitivity calculator.

Calculate mouse sensitivity values after changing `cg_fov`
that will keep the exact same "feel" of the mouse.

It is recommended scale by adjusting the cvars `m_yaw` and `m_pitch`, but
`sensitivity` and `cl_mouseaccel` can also be adjusted instead.
"""

import argparse
import sys
import math

def sens_ratio(new_fov, old_fov):
    new_fov = math.radians(new_fov)
    old_fov = math.radians(old_fov)
    return math.tan(new_fov / 2) / math.tan(old_fov / 2)

def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '--new-fov',
        help='New cg_fov value',
        type=float,
        required=True,
    )
    parser.add_argument(
        '--old-fov',
        help='Old cg_fov value',
        type=float,
        required=True,
    )
    parser.add_argument(
        help='The sensitivity number(s) to scale with the fov change',
        dest='values_to_scale',
        default=[],
        nargs='*',
        type=float,
    )
    args = parser.parse_args()

    c = sens_ratio(args.new_fov, args.old_fov)
    if (not len(args.values_to_scale)):
        # No sensitivity number(s) to scale, print only ratio.
        print(c)
    else:
        for v in args.values_to_scale:
            print(c * float(v))

if __name__ == "__main__":
    main()
